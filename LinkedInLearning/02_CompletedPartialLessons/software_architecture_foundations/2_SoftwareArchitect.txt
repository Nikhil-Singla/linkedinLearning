
Traditional software architecture:
The architect creates a complete design before any code is written.
This person is often seen as the most intelligent person in the room and can be isolated from the implementation process.
This approach can be inefficient and adds risks to the software development process.
The big upfront design can never truly capture the needs of end users and often becomes obsolete quickly.
The centralized decision-making process of the architect can slow down the development process and add costs.
This method is also outdated, as the use of Unified Modeling Language (UML) is not commonly used anymore.

Modern Agile development:
The approach to architecture is more flexible and iterative.
This allows for changes and adjustments to be made as the software is being built and the needs of end users are better understood.

Modern architects play a different role in software development compared to the traditional "waterfall" approach. In waterfall, development is seen as 
a series of dependent steps performed in sequence and design is done upfront. In contrast, modern software development uses an "Agile" approach 
which welcomes changes and values learning through experimentation. In an Agile environment, design is done incrementally and the focus is on 
constantly releasing small working software and evolving based on feedback.

In an Agile environment, everyone is considered an architect at some level, and the traditional role of an architect is changed to a support role 
known as a "Servant Leader." The main responsibility of an Agile architect is to educate and coordinate teams and make sure that everyone understands 
and considers architectural issues as they work. The architect also ensures coherence across the system and provides guidance, not orders. 
Good Agile architects work collaboratively and eliminate the risk of a single point of failure. Their job is to keep the big picture in mind and guide 
the structure of the entire system in a direction that will work best.

The role of an architect in modern software development has changed with the shift towards Agile development practices. Agile emphasizes flexibility and learning 
as work progresses, rather than having a rigid plan in place beforehand. 

Frank Lloyd is a modern architect leading a cross-functional agile team at Acme, Inc. He encourages input from everyone and uses dot voting to rank notes. 
The team decides to use the microservice pattern and will meet again for event storming. Frank also attends a guild meeting to share knowledge with other architects 
and developers. He has a one-on-one meeting with the CTO to discuss the project's progress and challenges. The day ends with a retrospective meeting with the team 
to review their work and identify areas for improvement. As an agile architect, Frank facilitates collaboration and communication between teams to deliver valuable 
software to customers.

The afternoon emphasizes his interactions with other teams and his participation in a guild meeting focused on architecture. Frank's role is to coordinate, 
teach, and mentor while spreading his expertise to improve the organization's architecture. The article underscores the importance of teamwork, collaboration, communication, 
and continuous improvement in creating an evolving architecture.

Essentially one should understand that all good architects begin as developers and must possess strong programming skills. The importance of learning design and architecture 
through experience working with different systems, reading code, and attending conferences and meetups is priceless. The significance of practicing design skills through building 
projects and forming study groups cannot be stressed enough. Furthermore, communication and presentation skills plays a crucial role for architects. Lastly, architecture is the 
result of the interaction of design patterns in creating a larger system.